" Always remember this file is sourced by both the unix and Win32 versions
set nocompatible

set enc=utf-8

if has("win32")
	set directory=$HOME\vimfiles\backup,$TEMP
	set backupdir=$HOME\vimfiles\backup,$TEMP
	set rtp+=$HOME\vimfiles\bundle\vundle
endif

if has("unix")
	set directory=$HOME/.vim/backup
	set backupdir=$HOME/.vim/backup
	set rtp+=$HOME/.vim/bundle/vundle/
endif

if $TERM != "cygwin"
	"	let g:CSApprox_use_showrgb=1
	"	let g:CSApprox_verbose_level=5
endif



" for new installations, install vundle into the bundle dir 
"git clone https://github.com/gmarik/vundle.git ~/.vim/bundle/vundle 
" then to install or update call BundleInstall!  (with the bang)

call vundle#rc()

Bundle 'gmarik/vundle'
Bundle 'tpope/vim-fugitive'
Bundle 'tpope/vim-unimpaired'
Bundle 'tpope/vim-surround'
Bundle 'vim-scripts/taglist.vim'
Bundle 'vim-scripts/mru.vim'
Bundle 'bufexplorer.zip'
Bundle 'sjl/gundo.vim'
" Bundle 'groenewege/vim-less'
Bundle 'vim-scripts/aspnetcs.git'
Bundle 'vim-scripts/AnsiEsc.vim'
Bundle 'scrooloose/syntastic.git'
Bundle 'scrooloose/nerdtree.git'
Bundle 'scrooloose/nerdcommenter.git'

Bundle 'vim-scripts/JavaScript-Indent.git'
"if has("unix")
"	Bundle 'Valloric/YouCompleteMe.git'
"	Bundle 'derekwyatt/vim-scala'
"endif

let g:syntastic_javascript_checkers=['jslint']
let g:syntastic_javascript_jslint_conf = ""
let g:syntastic_html_checkers=['']

let g:syntastic_always_populate_loc_list=1

" from vimcasts, a script to change tab settings
" Set tabstop, softtabstop and shiftwidth to the same value
command! -nargs=* Stab call Stab()
function! Stab()
	let l:tabstop = 1 * input('set tabstop = softtabstop = shiftwidth = ')
	if l:tabstop > 0
		let &l:sts = l:tabstop
		let &l:ts = l:tabstop
		let &l:sw = l:tabstop
	endif
	call SummarizeTabs()
endfunction

function! SummarizeTabs()
	try
		echohl ModeMsg
		echon 'tabstop='.&l:ts
		echon ' shiftwidth='.&l:sw
		echon ' softtabstop='.&l:sts
		if &l:et
			echon ' expandtab'
		else
			echon ' noexpandtab'
		endif
	finally
		echohl None
	endtry
endfunction




set selectmode=mouse

set tabstop=4
set shiftwidth=4
set softtabstop=4
set smarttab
set autoindent
set expandtab

set showmatch

" a bit contradictory here
set visualbell
set noerrorbells

" set textwidth=120
set nowrap

set showcmd

" avoid the 'hit enter to continue messages
set shm=ITta

" cindent just annoys me
set nocindent
set noruler

" things to ignore for file completion
set wildignore=*.bak,~,*.o,*.info,*.swp,*.class


" from vimrc_example
" Only do this part when compiled with support for autocommands
if has("autocmd")
	" enable our plugins
	filetype plugin on
	augroup filetypedetect
		" au BufNewFile,BufRead,BufEnter *.aspx	setf aspnet
		autocmd BufEnter,BufNewFile,BufRead *.vb setlocal ft=vbnet
		autocmd BufEnter,BufNewFile,BufRead *.ps1 setlocal ft=ps1
		autocmd BufEnter,BufRead,BufNewFile *.xml.txt		setlocal filetype=xml 
		" Xaml
		autocmd BufEnter,BufRead,BufNewFile *.xaml        setlocal filetype=xml
		autocmd BufEnter,BufRead,BufNewFile *.vssettings setlocal filetype=xml

	augroup END


	augroup cprog
		" Remove all cprog autocommands
		au!

		" When starting to edit a file:
		"   For C and C++ files set formatting of comments and set C-indenting on.
		"   For other files switch it off.
		"   Don't change the order, it's important that the line with * comes first.
		autocmd FileType *      set formatoptions=tcql nocindent comments&
		autocmd FileType c,cpp  set formatoptions=croql nocindent comments=sr:/*,mb:*,el:*/,://

	augroup END


	augroup auindent	
		au!
		au BufEnter,BufRead,BufNewFile *.rb,erb,Gemfile,Guardfile   setlocal ts=2 sts=2 sw=2 expandtab
		au BufEnter,BufRead,BufNewFile *.py,*.hs   setlocal ts=4 sts=4 sw=4 expandtab
		au BufEnter,BufRead,BufNewFile *.cs,*.vb,*.xml,xaml setlocal ts=4 sts=4 sw=4 noexpandtab
		au BufEnter,BufRead,BufNewFile *.cshtml setlocal filetype=cshtml ts=4 sts=4 sw=4 noexpandtab
		au BufNewFile,BufRead,BufEnter *.grm	setlocal ft=grm shellpipe= makeef=%:r.log errorformat=%m makeprg=goldbuilder_main\ \"%\"\ \"%:r.cgt\"\

		" au BufEnter,BufRead,BufNewFile *.html,*.xml set fp=tidy\ -qci\ -utf8

	augroup END

endif

" let leader-k turn off search highliting
nnoremap <leader>k :silent noh<CR>
nnoremap <leader>q :normal mzgg=G`z<CR>
nnoremap <leader>m :MRU<CR>

" a cheap way to compile the current module
nnoremap <leader>p :python -c "import %"<cr>


" sf islike gf but in a new window 
:nnoremap sf :sp <cfile><CR>

" map the F1 key to escape in insert mode in case i hit it accidentally
inoremap <F1> <Esc>

" and some simple mappings / tags now override this
" nnoremap \t :echo strftime("%c", localtime())<CR>

" and I often want to execute the current script
noremap <leader>e :!./%<CR>
nnoremap <leader>x :!chmod +x %<cr><cr>

" write as root, but leave the Load prompt after
cnoremap w!! w !sudo tee % >/dev/null<CR>

cabbrev Gt Gtabedit!

nnoremap <leader>a :AnsiEsc<CR>
nnoremap <leader>c :!clear<cr><cr>
nnoremap <leader>l :set list!<CR>

nmap <leader>t :TlistToggle<CR>
nmap <leader>n :set number!

" useful for view-source in various browsers
nnoremap <leader>h :setlocal ft=html<CR>
nnoremap <leader>g :Gtabedit! lg<CR>:AnsiEsc<CR>

nnoremap <leader>u :%s/public [a-zA-Z.<>?]\+ \([a-zA-Z0-9_]\+\) {.*$/\1 = s.\1,/
nnoremap <leader>i mpgg=G`pzz

" clean up javacript
nnoremap <leader>j :%s/\s\+$//ge<CR>:%s/\s\+$//ge<CR>:%s/\(function\\|typeof\\|\s\+if\\|else if\\|for\)(/\1 (/ge<CR>

set pastetoggle=<leader>p

" Taglist 
let Tlist_GainFocus_On_ToggleOpen = 1

" set listchars=tab:?\ ,eol:Â¬
set listchars=tab:>\ ,eol:$,trail:·
" set listchars=tab:>·,eol:$

" windows-ish keystrokes
nnoremap <C-Y> <C-R>


" Cd moves me to the directory of the current file
com! Cd exec "cd " . expand("%:p:h")       


" I like highlighting strings inside C comments
let c_comment_strings=1

" Switch on search pattern highlighting.
set hlsearch

filetype plugin indent on

" Hide the mouse pointer while typing
set mousehide

" Append modeline after last line in buffer.
" Use substitute() instead of printf() to handle '%%s' modeline in LaTeX
" files.
function! AppendModeline()
	let l:modeline = printf(" vim: set ts=%d sw=%d tw=%d :",
				\ &tabstop, &shiftwidth, &textwidth)
	let l:modeline = substitute(&commentstring, "%s", l:modeline, "")
	call append(line("$"), l:modeline)
endfunction

"function! reverse()
"	:g/^/m0
"endfunction

set viminfo=%,'50,\"100,n~/.viminfo

:source $VIMRUNTIME/macros/matchit.vim

set incsearch

" silent! colorscheme sonofobsidian
" silent! colorscheme ragblue
silent! colorscheme mymolokai

syntax on

set number
set statusline=%<%f\ %h%m%r%{fugitive#statusline()}%=%-14.(%l,%c%V%)\ %P

" vim:set ft=vim:ts=4 
