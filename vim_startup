" Always remember this file is sourced by both the unix and Win32 versions
set nocompatible
"filetype off " vundle requires this
set enc=utf-8
"
" set directory=$HOME/.vim/backup
" set backupdir=$HOME/.vim/backup
" set undodir=$HOME/.vim/backup
set nobackup
set noswapfile
set noundofile

if has('win32') || has('win64')
    set rtp+=$HOME/.vim
endif

"filetype plugin on
"

call plug#begin('~/.vim/plugged')

Plug 'tpope/vim-fugitive'
Plug 'tpope/vim-unimpaired'
Plug 'tpope/vim-surround'
Plug 'tpope/vim-commentary'
" Plug 'tpope/vim-vinegar'
Plug 'machakann/vim-highlightedyank'

" Plug 'vim-scripts/taglist.vim'
" Plug 'sjl/gundo.vim'

Plug 'jlanzarotta/bufexplorer'
Plug 'kien/ctrlp.vim'
Plug 'vim-scripts/AnsiEsc.vim'
Plug 'mattn/emmet-vim'
" Plug 'scrooloose/syntastic'
Plug 'scrooloose/nerdtree'

" Plug 'editorconfig/editorconfig-vim'
Plug 'sgur/vim-editorconfig'

Plug 'w0rp/ale'
" Plug 'neomake/neomake'
Plug 'sheerun/vim-polyglot'
Plug 'vim-airline/vim-airline'

" Plug 'juliosueiras/cakebuild.vim'


" formatting 

if has("python3")
    Plug 'SirVer/ultisnips'
endif

if has('unix')

	"    Plug 'bitc/vim-hdevtools'
    Plug 'Twinside/vim-hoogle'
	Plug 'neovimhaskell/haskell-vim'
    Plug 'parsonsmatt/intero-neovim'
	Plug 'alx741/vim-hindent'

endif

call plug#end()

if has('unix')
    " neovim specific things, since 
	tnoremap <Esc> <C-\><C-n>
endif

let g:hindent_on_save = 0

"" " ultisnips setup
let g:UltiSnipsNoPythonWarning="1"
let g:UltiSnipsExpandTrigger="<c-e>"
" let g:UltiSnipsJumpForwardTrigger="<c-b>"
" let g:UltiSnipsJumpBackwardTrigger="<c-z>"
"
"" " If you want :UltiSnipsEdit to split your window.
"" let g:UltiSnipsEditSplit="vertical"
"
let g:neocomplete#enable_at_startup = 1
if !exists('g:neocomplete#force_omni_input_patterns')
    let g:neocomplete#force_omni_input_patterns = {}
endif

if exists('g:loaded_neocomplete')
    inoremap <expr><TAB>  pumvisible() ? "\<C-n>" : "\<TAB>"
    " <C-h>, <BS>: close popup and delete backword char.
    inoremap <expr><C-h> neocomplete#smart_close_popup()."\<C-h>"
    inoremap <expr><BS> neocomplete#smart_close_popup()."\<C-h>"
endif

if !exists('g:neocomplete#force_omni_input_patterns')
    let g:neocomplete#force_omni_input_patterns.typescript = '[^. *\t]\.\w*\|\h\w*::'
endif


" For conceal markers, I like to keep it off
if has('conceal')
  set conceallevel=0 concealcursor=niv
endif

if has('gui')
  set balloonevalterm
endif

let g:ctrlp_mruf_exclude = '.git/*|*.tmp|node_modules|jspm_components|coverage'
"
"
" from vimcasts, a script to change tab settings
" Set tabstop, softtabstop and shiftwidth to the same value
command! -nargs=* Stab call Stab()
function! Stab()
	let l:tabstop = 1 * input('set tabstop = softtabstop = shiftwidth = ')
	if l:tabstop > 0
		let &l:sts = l:tabstop
		let &l:ts = l:tabstop
		let &l:sw = l:tabstop
	endif
	call SummarizeTabs()
endfunction
"
function! SummarizeTabs()
	try
		echohl ModeMsg
		echon 'tabstop='.&l:ts
		echon ' shiftwidth='.&l:sw
		echon ' softtabstop='.&l:sts
		if &l:et
			echon ' expandtab'
		else
			echon ' noexpandtab'
		endif
	finally
		echohl None
	endtry
endfunction
"
"
"

augroup haskell
    " Remove all haskell autocommands
    au!	
    au BufNewFile,BufRead *.hs  set makeprg=stack\ build ts=4 sw=4 sts=4 expandtab
    au BufNewFile,BufRead *.cabal  set makeprg=stack\ build
augroup END

nnoremap <leader>m :CtrlPMRU<CR>
nnoremap <leader>y mmya}V%y
"
nnoremap <leader>A :%s/^\s*public \([a-zA-Z0-9]\+\)\(?\?\) \(\h\)\(\S\+\) /\l\3\4\2: \1/<cr>:%s/int{.*/number;/<cr>:%s/string{.*/string;/<cr>:%s/DateTime{.*/date;<cr>:%s/bool{.*/boolean;/<cr>
nnoremap <leader>T :%s/^\s*\([a-zA-Z]\)\([a-zA-Z0-9]\+\):.*$/<th ng-click="vm.pager.updateSort('\l\1\2')" class="clickable">\u\1\2</th>/<cr>
nnoremap <leader>D :%s#^\s*\([a-zA-Z]\)\([a-zA-Z0-9]\+\):.*$#<td>{{item.\l\1\2}}</td>#<cr>
"
"" a cheap way to compile the current module
"" nnoremap <leader>p :python -c "import %"<cr>
"
"" map the F1 key to escape in insert mode in case i hit it accidentally
inoremap <F1> <Esc>
"
"" gitttish things
cabbrev Gt Gtabedit!
cabbrev Gm Gcommit -am 
nnoremap <leader>g :Gtabedit! lg<CR>:AnsiEsc<CR>
nnoremap <leader>G :Gstatus<CR>

nnoremap <leader>a :AnsiEsc<CR>
nnoremap <leader>c :!clear<cr><cr>

" nnoremap <leader>s :SyntasticToggleMode<CR>

nnoremap <leader>l :set list!<CR>

nnoremap <leader>d :let @* = expand("%:p:h")<CR>
nnoremap <leader>R :let @* = substitute(expand("%"),"\\","/","g")<CR>
" cnoremap sd :split %:h
cnoremap gd :e %:h
nnoremap <leader>w :set wrap!<CR>


" set pastetoggle=<leader>pp

"
"
let g:ctrlp_custom_ignore = '\v[\/](\.git|\.hg|\.svn|node_modules|bower_components|jspm_components)$'

" set listchars=tab:?\ ,eol:Â¬
set listchars=tab:>\ ,eol:$,trail:·
" set listchars=tab:>·,eol:$

" windows-ish keystrokes
nnoremap <C-Y> <C-R>


" Cd moves me to the directory of the current file
com! Cd exec "cd " . expand("%:p:h")       


" I like highlighting strings inside C comments
let c_comment_strings=1


filetype plugin indent on

" Hide the mouse pointer while typing
set mousehide


"function! reverse()
"	:g/^/m0
"endfunction

set viminfo=%,'50,\"100,n~/.viminfo

" :source $VIMRUNTIME/macros/matchit.vim

"
" silent! colorscheme sonofobsidian
" silent! colorscheme ragblue
silent! colorscheme mymolokai

hi TabLineFill ctermfg=8 ctermbg=8
hi TabLine ctermfg=2 ctermbg=8
hi TabLineSel ctermfg=3 ctermbg=8
"
set number
" todo check for fugitive
" set statusline=%<%f\ %h%m%r%{fugitive#statusline()}%=%-14.(%l,%c%V%)\ %B\ %P
set laststatus=2
set diffopt=filler,vertical

let g:EditorConfig_exclude_patterns = ['fugitive://.*', 'scp://.*']
set ts=4
set smartcase

"
" don't unzip zip fieles
"let g:loaded_zipPlugin= 1
let g:loaded_zip      = 1
"
"" temp for broken keyboard
"nnoremap & ^
"
"
" vim:set ft=vim:ts=4 
"
