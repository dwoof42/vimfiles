snippet directive

/* @ngInject */
export class FooController {

	constructor ($log : ng.ILogService) {
		$log.log('hello world');
	}
}

export function FooDirective {

	return {
		restrict: 'EA',
		controller: FooController,
		controllerAs: 'vm',
		template: require('./foo.html'),
		link: function (scope, element, attrs) {
		}
	};
}


endsnippet

snippet controller
/* @ngInject */
export class FooController {

	constructor ($log : ng.ILogService) {
		$log.log('hello world');
	}
}

endsnippet

snippet service

export class FooService {
	
	constructor ($log: ng.ILogService) {
		$log.log('hi there');
	}

}

endsnippet

snippet spec

import {MainController} from './main.controller';

describe('maincontroller', () => {
	let mainController: MainController;

	beforeEach(angular.mock.module('app'));

	beforeEach(inject(($controller: angular.IControllerService) => {
		webDevTec.data = [null, null, null, null, null];
		// spyOn(toastr, 'info').and.callThrough();

		mainController = $controller('MainController');
	}));

	it('should run a test', () => expect(1).toBeTruthy() );

});


endsnippet

snippet reference
	/// <reference path="${0}" />
endsnippet

snippet service2
import {Injectable} from 'angular2/core';
import {LoggerService} from '../logger.service.ts';


@Injectable()
export class MyService {

	constructor (private _logger : LoggerService) {
	}

}

endsnippet

snippet component2


import {Component} from 'angular2/core';

import {Alert} from 'ng2-angular/ng2-angular';
import {AlertHtml} from './alert.html';
import {AlertService} from './alert.service.ts';


export interface IAlert {
	message: string;
	level: string;
}

@Component({
	selector: 'dt-alert',
	template: AlertHtml,
	directives: [Alert]
})

export class AlertListComponent implements OnInit {

	constructor(public service : AlertService) {

	}

}

endsnippet

snippet pipe2

import {Pipe, PipeTransform} from 'angular2/core';
import {IProduct} from './product';

@Pipe({
    name: 'productFilter'
})
export class ProductFilterPipe implements PipeTransform {

    transform(value: IProduct[], args: string[]): IProduct[] {
        if (!(args && args[0])) {
            return value;
        }
        let filter = args[0].toLocaleLowerCase();
        return value.filter(p => this.lowerName(p).indexOf(filter) >= 0);
    }

    lowerName (product: IProduct): string  {
        return product.productName.toLocaleLowerCase();
    }

}

endsnippet
