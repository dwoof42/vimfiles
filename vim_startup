" Always remember this file is sourced by both the unix and Win32 versions
set nocompatible
filetype off " vundle requires this
set enc=utf-8

if has("win32")
	set directory=$HOME\vimfiles\backup,$TEMP
	set backupdir=$HOME\vimfiles\backup,$TEMP
    set undodir=$HOME\vimfiles\backup,$TEMP
	set rtp+=$HOME\vimfiles\bundle\vundle
endif

if has("unix")
	set directory=$HOME/.vim/backup
	set backupdir=$HOME/.vim/backup
	set undodir=$HOME/.vim/backup
	set rtp+=$HOME/.vim/bundle/vundle/
endif


" for new installations, install vundle into the bundle dir 
"git clone https://github.com/gmarik/vundle.git ~/.vim/bundle/vundle 
" then to install or update call BundleInstall!  (with the bang)

call vundle#rc()

Plugin 'gmarik/vundle'
Plugin 'tpope/vim-fugitive'
Plugin 'tpope/vim-unimpaired'
Plugin 'tpope/vim-surround'
Plugin 'tpope/vim-commentary'
Plugin 'vim-scripts/taglist.vim'
" probably obsoleted by ctrlp
" Bundle 'vim-scripts/mru.vim'
Plugin 'bufexplorer.zip'
" Plugin 'sjl/gundo.vim'
Plugin 'groenewege/vim-less'
Plugin 'kien/ctrlp.vim'
Plugin 'vim-scripts/AnsiEsc.vim'
Plugin 'mattn/emmet-vim'
Plugin 'scrooloose/syntastic.git'
Plugin 'scrooloose/nerdtree.git'
Plugin 'vim-scripts/aspnetcs.git'
" Plugin 'msanders/snipmate.vim'
Plugin 'vim-scripts/logstash.vim'
Plugin 'kchmck/vim-coffee-script'
Plugin 'leafgarland/typescript-vim'

" tryout gulp
Plugin 'KabbAmine/gulp-vim'



if has("unix")
	" Bundle 'Valloric/YouCompleteMe'
	" Bundle 'derekwyatt/vim-scala'
    " Bundle 'fatih/vim-go'
    Plugin 'bitc/vim-hdevtools'
    Plugin 'Twinside/vim-hoogle'
endif

" Syntastic setup
function! FindCabalSandboxRoot()
    return finddir('.cabal-sandbox', './;')
endfunction

function! FindCabalSandboxRootPackageConf()
    return glob(FindCabalSandboxRoot().'/*-packages.conf.d')
endfunction

" let g:hdevtools_options = '-g-ilib -g-isrc -g-i. -g-idist/build/autogen -g-Wall -g-package-conf='.FindCabalSandboxRootPackageConf()
"let g:syntastic_haskell_hdevtools_args = '-g-ilib -g-isrc -g-i. -g-idist/build/autogen -g-Wall -g-package-conf='.FindCabalSandboxRootPackageConf()
"let g:syntastic_haskell_hdevtools_args = '-g-ilib -g-isrc -g-i. -g-idist/build/autogen -g-Wall -g-package-conf='.FindCabalSandboxRootPackageConf()

let g:syntastic_javascript_checkers=['jshint']
" let g:syntastic_javascript_jslint_args = "--nomen"
let g:syntastic_typescript_checkers=['tslint']
let g:syntastic_html_checkers=['']
" let g:syntastic_haskell_checkers=['hdevtools', 'hlint']
let g:syntastic_haskell_checkers=['hlint']

let g:syntastic_typescript_checkers=['tslint']

let g:syntastic_always_populate_loc_list=1

" go settings
let g:go_fmt_fail_silently=1

let g:ctrlp_mruf_exclude = '.git/*|*.tmp'


" from vimcasts, a script to change tab settings
" Set tabstop, softtabstop and shiftwidth to the same value
command! -nargs=* Stab call Stab()
function! Stab()
	let l:tabstop = 1 * input('set tabstop = softtabstop = shiftwidth = ')
	if l:tabstop > 0
		let &l:sts = l:tabstop
		let &l:ts = l:tabstop
		let &l:sw = l:tabstop
	endif
	call SummarizeTabs()
endfunction

function! SummarizeTabs()
	try
		echohl ModeMsg
		echon 'tabstop='.&l:ts
		echon ' shiftwidth='.&l:sw
		echon ' softtabstop='.&l:sts
		if &l:et
			echon ' expandtab'
		else
			echon ' noexpandtab'
		endif
	finally
		echohl None
	endtry
endfunction


" from vimrc_example
" Only do this part when compiled with support for autocommands
if has("autocmd")
	" enable our plugins
	filetype plugin on
	augroup filetypedetect
		" au BufNewFile,BufRead,BufEnter *.aspx	setf aspnet
		autocmd BufEnter,BufNewFile,BufRead *.vb setlocal ft=vbnet
		autocmd BufEnter,BufNewFile,BufRead *.ps1 setlocal ft=ps1
		autocmd BufEnter,BufRead,BufNewFile *.xml.txt		setlocal filetype=xml equalprg=xmllint\ --format\ -
		" Xaml
		autocmd BufEnter,BufRead,BufNewFile *.xaml        setlocal filetype=xml
		autocmd BufEnter,BufRead,BufNewFile *.vssettings setlocal filetype=xml

	augroup END


	augroup cprog
		" Remove all cprog autocommands
		au!

		" When starting to edit a file:
		"   For C and C++ files set formatting of comments and set C-indenting on.
		"   For other files switch it off.
		"   Don't change the order, it's important that the line with * comes first.
		autocmd FileType *      set formatoptions=tcql nocindent comments&
		autocmd FileType c,cpp  set formatoptions=croql nocindent comments=sr:/*,mb:*,el:*/,://

        autocmd FileType javascript let &formatprg="js-beautify -q -j -f -" 
        autocmd FileType html let &formatprg="html-beautify -q -f -" 
	augroup END


	augroup auindent	
		au!
		au BufEnter,BufRead,BufNewFile *.rb,erb,Gemfile,Guardfile,Vagrantfile   setlocal ts=2 sts=2 sw=2 expandtab
		au BufEnter,BufRead,BufNewFile *.py,*.hs   setlocal ts=4 sts=4 sw=4 expandtab
		au BufEnter,BufRead,BufNewFile *.cs,*.vb,*.xml,xaml setlocal ts=4 sts=4 sw=4 noexpandtab
		au BufEnter,BufRead,BufNewFile *.cshtml setlocal filetype=cshtml ts=4 sts=4 sw=4 noexpandtab
		au BufNewFile,BufRead,BufEnter *.grm	setlocal ft=grm shellpipe= makeef=%:r.log errorformat=%m makeprg=goldbuilder_main\ \"%\"\ \"%:r.cgt\"\

        au BufNewFile,BufRead,BufEnter *.xml setlocal equalprg=xmllint\ --format\ -
		au BufEnter,BufRead,BufNewFile *.hs   setlocal makeprg=cabal\ build

		" au BufEnter,BufRead,BufNewFile *.html,*.xml set fp=tidy\ -qci\ -utf8

	augroup END

endif

nnoremap <leader>m :CtrlPMRU<CR>

nnoremap <leader>y mmya}V%y

" a cheap way to compile the current module
" nnoremap <leader>p :python -c "import %"<cr>

" map the F1 key to escape in insert mode in case i hit it accidentally
inoremap <F1> <Esc>

" and I often want to execute the current script
if has("unix")
    noremap <leader>e :!./%<CR>
    nnoremap <leader>x :!chmod +x %<cr><cr>
    " write as root, but leave the Load prompt after
    cnoremap w!! w !sudo tee % >/dev/null<CR>
endif

" xml format
" nnoremap <leader>x :%s/\(<[^>]*>\)/\n\1/g<CR>1G=G


" gitttish things
cabbrev Gt Gtabedit!
nnoremap <leader>g :Gtabedit! lg<CR>:AnsiEsc<CR>

nnoremap <leader>a :AnsiEsc<CR>
nnoremap <leader>c :!clear<cr><cr>

nmap <leader>t :TlistToggle<CR>
nnoremap <leader>u :GundoToggle<CR>
nnoremap <leader>s :SyntasticToggleMode<CR>

nnoremap <leader>p :%s#\([a-zA-Z_]\+\)#public string \1 {get;set;}#
nnoremap <leader>d :let @* = expand("%:p:h")<CR>
nnoremap <leader>r :let @* = substitute(expand("%"),"\\","/","g")<CR>
cnoremap sd :split %:h
cnoremap gd :e %:h

" set pastetoggle=<leader>pp

" Taglist 
let Tlist_GainFocus_On_ToggleOpen = 1


let g:ctrlp_custom_ignore = '\v[\/](\.git|\.hg|\.svn|node_modules|bower_components)$'

" set listchars=tab:?\ ,eol:Â¬
set listchars=tab:>\ ,eol:$,trail:·
" set listchars=tab:>·,eol:$

" windows-ish keystrokes
nnoremap <C-Y> <C-R>


" Cd moves me to the directory of the current file
com! Cd exec "cd " . expand("%:p:h")       


" I like highlighting strings inside C comments
let c_comment_strings=1


filetype plugin indent on

" Hide the mouse pointer while typing
set mousehide

" Append modeline after last line in buffer.
" Use substitute() instead of printf() to handle '%%s' modeline in LaTeX
" files.
function! AppendModeline()
	let l:modeline = printf(" vim: set ts=%d sw=%d tw=%d :",
				\ &tabstop, &shiftwidth, &textwidth)
	let l:modeline = substitute(&commentstring, "%s", l:modeline, "")
	call append(line("$"), l:modeline)
endfunction

"function! reverse()
"	:g/^/m0
"endfunction

set viminfo=%,'50,\"100,n~/.viminfo

:source $VIMRUNTIME/macros/matchit.vim


" silent! colorscheme sonofobsidian
" silent! colorscheme ragblue
silent! colorscheme mymolokai

syntax on

set number
set statusline=%<%f\ %h%m%r%{fugitive#statusline()}%=%-14.(%l,%c%V%)\ %P
set laststatus=2
set undofile

" vim:set ft=vim:ts=4 
