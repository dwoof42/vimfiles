" Always remember this file is sourced by both the unix and Win32 versions
set nocompatible
"filetype off " vundle requires this
set enc=utf-8
"
set directory=$HOME/.vim/backup
set backupdir=$HOME/.vim/backup
set undodir=$HOME/.vim/backup

if has('win32') || has('win64')
    set rtp+=$HOME/.vim
    " set packpath+=$HOME/.vim/bundle
endif

"filetype plugin on
"
"" " ultisnips setup
let g:UltiSnipsNoPythonWarning="1"
let g:UltiSnipsExpandTrigger="<c-e>"
" let g:UltiSnipsJumpForwardTrigger="<c-b>"
" let g:UltiSnipsJumpBackwardTrigger="<c-z>"
"
"" " If you want :UltiSnipsEdit to split your window.
"" let g:UltiSnipsEditSplit="vertical"
"
let g:neocomplete#enable_at_startup = 1
 if !exists('g:neocomplete#force_omni_input_patterns')
     let g:neocomplete#force_omni_input_patterns = {}
 endif
 if exists('g:loaded_neocomplete')
    inoremap <expr><TAB>  pumvisible() ? "\<C-n>" : "\<TAB>"
    " <C-h>, <BS>: close popup and delete backword char.
    inoremap <expr><C-h> neocomplete#smart_close_popup()."\<C-h>"
    inoremap <expr><BS> neocomplete#smart_close_popup()."\<C-h>"
endif

let g:neocomplete#force_omni_input_patterns.typescript = '[^. *\t]\.\w*\|\h\w*::'

"
" Syntastic setup
function! FindCabalSandboxRoot()
    return finddir('.cabal-sandbox', './;')
endfunction

function! FindCabalSandboxRootPackageConf()
    return glob(FindCabalSandboxRoot().'/*-packages.conf.d')
endfunction



" For conceal markers, I like to keep it off
if has('conceal')
  set conceallevel=0 concealcursor=niv
endif

set ballooneval

" let g:hdevtools_options = '-g-ilib -g-isrc -g-i. -g-idist/build/autogen -g-Wall -g-package-conf='.FindCabalSandboxRootPackageConf()
"let g:syntastic_haskell_hdevtools_args = '-g-ilib -g-isrc -g-i. -g-idist/build/autogen -g-Wall -g-package-conf='.FindCabalSandboxRootPackageConf()
"let g:syntastic_haskell_hdevtools_args = '-g-ilib -g-isrc -g-i. -g-idist/build/autogen -g-Wall -g-package-conf='.FindCabalSandboxRootPackageConf()
"
"" if !exists("g:ycm_semantic_triggers")
""    let g:ycm_semantic_triggers = {}
"" endif
"" let g:ycm_semantic_triggers['typescript'] = ['.']
"

let g:syntastic_jsx_checkers=['eslint']
let g:syntastic_javascript_checkers=['eslint']
" let g:syntastic_javascript_jslint_args = "--nomen"
let g:syntastic_typescript_checkers=['tsuquyomi']
"
let g:syntastic_html_checkers=['']
" let g:syntastic_haskell_checkers=['hdevtools', 'hlint']
let g:syntastic_haskell_checkers=['hlint']
"
let g:syntastic_always_populate_loc_list=1
"
"" go settings
"let g:go_fmt_fail_silently=1
"
let g:ctrlp_mruf_exclude = '.git/*|*.tmp|node_modules|jspm_components|coverage'
"
"
" from vimcasts, a script to change tab settings
" Set tabstop, softtabstop and shiftwidth to the same value
command! -nargs=* Stab call Stab()
function! Stab()
	let l:tabstop = 1 * input('set tabstop = softtabstop = shiftwidth = ')
	if l:tabstop > 0
		let &l:sts = l:tabstop
		let &l:ts = l:tabstop
		let &l:sw = l:tabstop
	endif
	call SummarizeTabs()
endfunction
"
"function! SummarizeTabs()
"	try
"		echohl ModeMsg
"		echon 'tabstop='.&l:ts
"		echon ' shiftwidth='.&l:sw
"		echon ' softtabstop='.&l:sts
"		if &l:et
"			echon ' expandtab'
"		else
"			echon ' noexpandtab'
"		endif
"	finally
"		echohl None
"	endtry
"endfunction
"
"
"" from vimrc_example
"" Only do this part when compiled with support for autocommands
if has("autocmd")
	" enable our plugins
	augroup filetypedetect
		" au BufNewFile,BufRead,BufEnter *.aspx	setf aspnet
		autocmd BufEnter,BufNewFile,BufRead *.vb setlocal ft=vbnet
		autocmd BufEnter,BufNewFile,BufRead *.ps1 setlocal ft=ps1
		" Xaml
		autocmd BufEnter,BufRead,BufNewFile *.xaml        setlocal filetype=xml
		autocmd BufEnter,BufRead,BufNewFile *.vssettings setlocal filetype=xml

	augroup END

"
	augroup cprog
		" Remove all cprog autocommands
		au!

		" When starting to edit a file:
		"   For C and C++ files set formatting of comments and set C-indenting on.
		"   For other files switch it off.
		"   Don't change the order, it's important that the line with * comes first.
		autocmd FileType *      set formatoptions=tcql nocindent comments&
		autocmd FileType c,cpp  set formatoptions=croql nocindent comments=sr:/*,mb:*,el:*/,://

        " autocmd FileType javascript let &formatprg="js-beautify -q -j -f -" 
        " autocmd FileType json let &formatprg="js-beautify -q -j -f -" 
        autocmd FileType javascript let &makeprg="gulp"
        " autocmd FileType html let &formatprg="html-beautify -q -f -" 
        autocmd FileType typescript JsPreTmpl html
        autocmd FileType typescript setlocal balloonexpr=tsuquyomi#balloonexpr()
	augroup END


	augroup auindent	
		au!
		au BufEnter,BufRead,BufNewFile *.rb,erb,Gemfile,Guardfile,Vagrantfile   setlocal ts=2 sts=2 sw=2 expandtab
		au BufEnter,BufRead,BufNewFile *.py,*.hs   setlocal ts=4 sts=4 sw=4 expandtab 
		" au BufEnter,BufRead,BufNewFile *.cs,*.vb,*.xml,xaml setlocal ts=4 sts=4 sw=4 noexpandtab
		" au BufEnter,BufRead,BufNewFile *.cshtml setlocal filetype=cshtml ts=4 sts=4 sw=4 noexpandtab
		au BufNewFile,BufRead,BufEnter *.grm	setlocal ft=grm shellpipe= makeef=%:r.log errorformat=%m makeprg=goldbuilder_main\ \"%\"\ \"%:r.cgt\"\

        au BufNewFile,BufRead,BufEnter *.xml setlocal equalprg=pretty\ -t\ xml formatprg=pretty\ -t\ xml     
        au BufNewFile,BufRead,BufEnter *.csproj,*.sln  setlocal filetype=xml equalprg=pretty\ -t\ xml formatprg=pretty\ -t\ xml     
		au BufEnter,BufRead,BufNewFile *.hs,*.cabal   setlocal makeprg=buildhaskell
        au BufEnter,BufRead,BufNewFile *.hs nnoremap <buffer> <LocalLeader>h :Hoogle<CR>

		" au BufEnter,BufRead,BufNewFile *.html,*.xml set fp=tidy\ -qci\ -utf8

	augroup END

    augroup js
        au!
        au BufEnter,BufRead,BufNewFile *.js setlocal includeexpr=substitute(v:fname,'$','.js','g')
        au BufEnter,BufRead,BufNewFile *.ts setlocal suffixesadd=.ts ts=4 sts=4 sw=4 expandtab
        " autocmd FileType typescript syn clear foldBraces
    augroup END

    augroup jsx
        au!
        autocmd! BufEnter  *.jsx  let b:syntastic_checkers=['eslint']
    augroup END

endif
"
nnoremap <leader>m :CtrlPMRU<CR>
nnoremap <leader>y mmya}V%y
"
"" tsuquyomi 
let g:tsuquyomi_auto_open=1
let g:tsuquyomi_debug=0
let g:tsuquyomi_disable_quickfix=1
let g:tsuquyomi_use_local_typescript=0
"nnoremap <leader>r :TsuRenameSymbol<CR>
"nnoremap <leader>q :cclose<CR>:lclose<CR>
"nnoremap <S-F12> :TsuReferences<CR>
"nnoremap <leader>t :let g:tsuquyomi_disable_quickfix=!g:tsuquyomi_disable_quickfix<CR>
"
nnoremap <leader>A :%s/^\s*public \([a-zA-Z0-9]\+\)\(?\?\) \(\h\)\(\S\+\) /\l\3\4\2: \1/<cr>:%s/int{.*/number;/<cr>:%s/string{.*/string;/<cr>:%s/DateTime{.*/date;<cr>:%s/bool{.*/boolean;/<cr>
nnoremap <leader>T :%s/^\s*\([a-zA-Z]\)\([a-zA-Z0-9]\+\):.*$/<th ng-click="vm.pager.updateSort('\l\1\2')" class="clickable">\u\1\2</th>/<cr>
nnoremap <leader>D :%s#^\s*\([a-zA-Z]\)\([a-zA-Z0-9]\+\):.*$#<td>{{item.\l\1\2}}</td>#<cr>
"" nnoremap <leader>q :set g:tsuquyomi_disable_default_mappings!
"" nnoremap <leader>q :set g:tsuquyomi_disable_default_mappings!
"
"" a cheap way to compile the current module
"" nnoremap <leader>p :python -c "import %"<cr>
"
"" map the F1 key to escape in insert mode in case i hit it accidentally
inoremap <F1> <Esc>
"
"" and I often want to execute the current script
"if has("unix")
"    noremap <leader>e :!./%<CR>
"    nnoremap <leader>x :!chmod +x %<cr><cr>
"    " write as root, but leave the Load prompt after
"    cnoremap w!! w !sudo tee % >/dev/null<CR>
"endif
"
"" xml format
"" nnoremap <leader>x :%s/\(<[^>]*>\)/\n\1/g<CR>1G=G
"
"
"" gitttish things
cabbrev Gt Gtabedit!
cabbrev Gm Gcommit -am 
nnoremap <leader>g :Gtabedit! lg<CR>:AnsiEsc<CR>
nnoremap <leader>G :Gstatus<CR>

nnoremap <leader>a :AnsiEsc<CR>
nnoremap <leader>c :!clear<cr><cr>

nnoremap <leader>s :SyntasticToggleMode<CR>

nnoremap <leader>l :set list!<CR>

nnoremap <leader>p :TsuImport<CR>
nnoremap <leader>d :let @* = expand("%:p:h")<CR>
nnoremap <leader>R :let @* = substitute(expand("%"),"\\","/","g")<CR>
" cnoremap sd :split %:h
cnoremap gd :e %:h
nnoremap <leader>w :set wrap!<CR>


" set pastetoggle=<leader>pp

"
"
let g:ctrlp_custom_ignore = '\v[\/](\.git|\.hg|\.svn|node_modules|bower_components|jspm_components)$'

" set listchars=tab:?\ ,eol:Â¬
set listchars=tab:>\ ,eol:$,trail:·
" set listchars=tab:>·,eol:$

" windows-ish keystrokes
nnoremap <C-Y> <C-R>


" Cd moves me to the directory of the current file
com! Cd exec "cd " . expand("%:p:h")       


" I like highlighting strings inside C comments
let c_comment_strings=1


filetype plugin indent on

" Hide the mouse pointer while typing
set mousehide

" Append modeline after last line in buffer.
" Use substitute() instead of printf() to handle '%%s' modeline in LaTeX
" files.
function! AppendModeline()
	let l:modeline = printf(" vim: set ts=%d sw=%d tw=%d :",
				\ &tabstop, &shiftwidth, &textwidth)
	let l:modeline = substitute(&commentstring, "%s", l:modeline, "")
	call append(line("$"), l:modeline)
endfunction

"function! reverse()
"	:g/^/m0
"endfunction

set viminfo=%,'50,\"100,n~/.viminfo

:source $VIMRUNTIME/macros/matchit.vim

"
" silent! colorscheme sonofobsidian
" silent! colorscheme ragblue
silent! colorscheme mymolokai
"
set number
"set statusline=%<%f\ %h%m%r%{fugitive#statusline()}%=%-14.(%l,%c%V%)\ %B\ %P
set laststatus=2
set undofile
set diffopt=filler,vertical
set backupcopy=yes
"
" don't unzip zip fieles
"let g:loaded_zipPlugin= 1
let g:loaded_zip      = 1
"
"" temp for broken keyboard
"nnoremap & ^
"
"
" vim:set ft=vim:ts=4 
"
